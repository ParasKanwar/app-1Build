{"version":3,"sources":["auth/complainify.png","auth/registration.jsx","serviceWorker.js","index.js"],"names":["module","exports","validator","require","Registration","props","localStorage","setItem","state","name","email","password","age","confirmPassword","passwordClass","exclamation","submitClass","submitState","emailFieldClass","emailFieldAfterRequest","isLoading","isEmailValid","className","onSubmitHandler","bind","onChangeHandler","onBlurHandler","this","a","length","b","setState","validateSubmit","event","console","log","getItem","data","JSON","stringify","Email","headers","Headers","append","request","Request","method","body","fetch","then","res","json","response","token","setTimeout","message","catch","e","preventDefault","target","value","isSubmitted","default","isEmail","options","status","style","marginTop","src","alt","textAlign","fontWeight","fontSize","background","marginBottom","onSubmit","type","placeholder","onChange","onBlur","required","max","disabled","Component","Boolean","window","location","hostname","match","setInterval","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,yC,oKCErCC,EAAYC,EAAQ,IAELC,E,YACnB,WAAYC,GAAQ,IAAD,6BACjB,4CAAMA,IACNC,aAAaC,QAAQ,OAAQ,SAC7B,EAAKC,MAAQ,CACXC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,IAAK,KACLC,gBAAiB,GACjBC,cAAe,QACfC,YAAa,KACbC,YAAa,iBACbC,aAAa,EACbC,gBAAiB,QACjBC,uBAAwB,GACxBC,WAAW,EACXC,cAAc,GAEhB,EAAKN,YACH,6BACE,0BAAMO,UAAU,0BACd,uBAAGA,UAAU,iCAEf,uBAAGA,UAAU,kBAAb,2CAGJ,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBA5BJ,E,8EAgCjB,GAAIG,KAAKnB,MAAMS,YAAa,CAC1B,IAAIW,GAAI,EACJD,KAAKnB,MAAMG,SAASkB,QAAU,IAChCD,EAAID,KAAKnB,MAAMK,kBAAoBc,KAAKnB,MAAMG,UAEhD,IAAImB,EAAIH,KAAKnB,MAAMa,aACnB,GAAIO,GAAKE,GAAyB,KAApBH,KAAKnB,MAAMC,KACvB,OAAOkB,KAAKI,SAAS,CAAEd,aAAa,SAEjC,IAAKU,KAAKnB,MAAMS,YAAa,CAClC,IAAIW,GAAI,EACJD,KAAKnB,MAAMG,SAASkB,QAAU,IAChCD,EAAID,KAAKnB,MAAMK,kBAAoBc,KAAKnB,MAAMG,UAEhD,IAAImB,EAAIH,KAAKnB,MAAMa,aACnB,IAAKO,IAAME,GAAyB,KAApBH,KAAKnB,MAAMC,KACzB,OAAOkB,KAAKI,SAAS,CAAEd,aAAa,O,2CAKxCU,KAAKK,mB,sCAESC,GAAQ,IAAD,OACrBN,KAAKI,SAAS,CAAEf,YAAa,6CADR,MAEkBW,KAAKnB,MAApCE,EAFa,EAEbA,MAAOD,EAFM,EAENA,KAAME,EAFA,EAEAA,SAAUC,EAFV,EAEUA,IAC/BsB,QAAQC,IAAI7B,aAAa8B,QAAQ,SACjC,IAAMC,EAAOC,KAAKC,UAAU,CAAEC,MAAO9B,EAAOD,OAAME,WAAUC,QACtD6B,EAAU,IAAIC,QACpBD,EAAQE,OAAO,eAAgB,oBAC/B,IAKMC,EAAU,IAAIC,QAAQ,8BALZ,CACdC,OAAQ,OACRL,UACAM,KAAMV,IAGRW,MAAMJ,GACHK,KADH,uCACQ,WAAMC,GAAN,eAAAtB,EAAA,+EAEqBsB,EAAIC,OAFzB,QAEIC,EAFJ,QAGWC,OAAO/C,aAAaC,QAAQ,QAAS6C,EAASC,OAC3DnB,QAAQC,IAAIiB,GACZE,YAAW,WACT,EAAKvB,SAAS,CACZtB,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,IAAK,KACLC,gBAAiB,GACjBC,cAAe,QACfC,YAAa,KACbC,YAAa,iBACbC,aAAa,EACbC,gBAAiB,QACjBC,uBAAwB,GACxBC,WAAW,EACXC,cAAc,MAEf,KArBD,gDAuBFiC,YAAW,WACT,EAAKvB,SAAS,CACZf,YAAa,oCAEd,KACHkB,QAAQC,IAAI,KAAEoB,SA5BZ,yDADR,uDAgCGC,OAAM,SAAAC,GACL,EAAK1B,SAAS,CAAEf,YAAa,iCAC7BkB,QAAQC,IAAIsB,EAAEF,YAqBlBtB,EAAMyB,mB,sCAEQzB,GACdN,KAAKI,SAAL,eAAiBE,EAAM0B,OAAOlD,KAAOwB,EAAM0B,OAAOC,QAClDjC,KAAKI,SAAS,CAAE8B,aAAa,M,oCAEjB5B,GAAQ,IAAD,OAEnB,GAA0B,aAAtBA,EAAM0B,OAAOlD,KACf,OAAIwB,EAAM0B,OAAOC,MAAM/B,OAAS,EACvBF,KAAKI,SAAS,CACnBjB,cAAe,kBACfC,YAAaY,KAAKZ,cAGfY,KAAKI,SAAS,CAAEjB,cAAe,QAASC,YAAa,OAE9D,GAA0B,UAAtBkB,EAAM0B,OAAOlD,MACMP,EAAU4D,QAAQC,QAAQ9B,EAAM0B,OAAOC,OAC1C,CAChBjC,KAAKI,SAAS,CAAEX,WAAW,EAAMD,uBAAwB,OACzD,IAAMsB,EAAU,IAAIC,QACpBD,EAAQE,OAAO,eAAgB,oBAC/B,IAAMqB,EAAU,CACdlB,OAAQ,MACRL,WAEIG,EAAU,IAAIC,QAAJ,2CACsBZ,EAAM0B,OAAOC,OACjDI,GAEFhB,MAAMJ,GACHK,MAAK,SAAAC,GACJI,YAAW,WACT,EAAKvB,SAAS,CAAEX,WAAW,IAER,MAAf8B,EAAIe,OACN,EAAKlC,SAAS,CACZb,gBAAiB,kBACjBC,uBACE,6BACE,0BAAMG,UAAU,0BACd,uBAAGA,UAAU,iCAEf,uBAAGA,UAAU,kBAAb,gDAMkB,MAAf4B,EAAIe,QACb,EAAKlC,SAAS,CACZV,cAAc,EACdH,gBAAiB,mBACjBC,uBACE,0BAAMG,UAAU,0BACd,uBAAGA,UAAU,oBAKrBY,QAAQC,IAAIe,EAAIe,UACf,QAEJT,OAAM,SAAAC,GACLvB,QAAQC,IAAIsB,EAAEF,e,+BAOtB,OACE,yBAAKjC,UAAW,sBACd,yBAAKA,UAAW,QAAS4C,MAAO,CAAEC,UAAW,KAC3C,uBAAG7C,UAAW,gCACZ,yBACE8C,IAAKjE,EAAQ,KAEbmB,UAAW,mBACX+C,IAAI,gBAIV,wBACEH,MAAO,CACLI,UAAW,SACXC,WAAY,OACZC,SAAU,KAJd,aAUA,yBAAKlD,UAAW,MAAO4C,MAAO,CAAEC,UAAW,GAAIM,WAAY,YACzD,yBAAKnD,UAAU,sBACb,wBAAI4C,MAAO,CAAEQ,aAAc,GAAIH,WAAY,SAA3C,WACA,0BAAMI,SAAUhD,KAAKJ,iBACnB,yBAAKD,UAAW,SACd,2BACEA,UAAW,QACXsD,KAAK,OACLnE,KAAK,OACLoE,YAAY,OACZC,SAAUnD,KAAKF,gBACfmC,MAAOjC,KAAKnB,MAAMC,KAClBsE,OAAQpD,KAAKD,cACbsD,UAAQ,KAGZ,yBAAK1D,UAAW,SACd,yBAAKA,UAAW,2BACd,2BACEA,UAAWK,KAAKnB,MAAMU,gBACtB0D,KAAK,QACLnE,KAAK,QACLoE,YAAY,QACZC,SAAUnD,KAAKF,gBACfmC,MAAOjC,KAAKnB,MAAME,MAClBqE,OAAQpD,KAAKD,cACbsD,UAAQ,IAETrD,KAAKnB,MAAMW,wBAEbQ,KAAKnB,MAAMY,UACV,8BAAUE,UAAU,4BAA4B2D,IAAI,OAApD,OAGE,MAEN,yBAAK3D,UAAW,SACd,yBAAKA,UAAW,2BACd,2BACEA,UAAWK,KAAKnB,MAAMM,cACtB8D,KAAK,WACLnE,KAAK,WACLoE,YAAY,WACZC,SAAUnD,KAAKF,gBACfmC,MAAOjC,KAAKnB,MAAMG,SAClBoE,OAAQpD,KAAKD,cACbsD,UAAQ,IAETrD,KAAKnB,MAAMO,cAGhB,yBAAKO,UAAW,SACd,2BACEA,UAAW,QACXsD,KAAK,SACLnE,KAAK,MACLoE,YAAY,MACZC,SAAUnD,KAAKF,gBACfmC,MAAOjC,KAAKnB,MAAMI,IAClBoE,UAAQ,KAGZ,yBAAK1D,UAAW,SACd,2BACEA,UAAW,QACXsD,KAAK,WACLnE,KAAK,kBACLoE,YAAY,mBACZC,SAAUnD,KAAKF,gBACfmC,MAAOjC,KAAKnB,MAAMK,gBAClBmE,UAAQ,KAGZ,4BACEE,SAAUvD,KAAKnB,MAAMS,YACrBK,UAAWK,KAAKnB,MAAMQ,YACtB4D,KAAK,UAHP,mB,GAnS4BO,aCQtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,aAHa,WACXC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,WAE1C,KDwHZ,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLjE,QAAQiE,MAAMA,EAAM5C,a","file":"static/js/main.7985af49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/complainify.bc7f0fe6.png\";","import React, { Component } from \"react\";\r\n// import axios from \"axios\";\r\nconst validator = require(\"validator\");\r\n\r\nexport default class Registration extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    localStorage.setItem(\"name\", \"paras\");\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      age: null,\r\n      confirmPassword: \"\",\r\n      passwordClass: \"input\",\r\n      exclamation: null,\r\n      submitClass: \"button is-info\",\r\n      submitState: true,\r\n      emailFieldClass: \"input\",\r\n      emailFieldAfterRequest: \"\",\r\n      isLoading: false,\r\n      isEmailValid: false\r\n    };\r\n    this.exclamation = (\r\n      <div>\r\n        <span className=\"icon is-small is-right\">\r\n          <i className=\"fas fa-exclamation-triangle\"></i>\r\n        </span>\r\n        <p className=\"help is-danger\">Password Length Must Be greater Than 8</p>\r\n      </div>\r\n    );\r\n    this.onSubmitHandler = this.onSubmitHandler.bind(this);\r\n    this.onChangeHandler = this.onChangeHandler.bind(this);\r\n    this.onBlurHandler = this.onBlurHandler.bind(this);\r\n    // this.onEmailBlurHandler = this.onEmailBlurHandler.bind(this);\r\n  }\r\n  validateSubmit() {\r\n    if (this.state.submitState) {\r\n      let a = false;\r\n      if (this.state.password.length >= 8) {\r\n        a = this.state.confirmPassword === this.state.password;\r\n      }\r\n      let b = this.state.isEmailValid;\r\n      if (a && b && this.state.name !== \"\") {\r\n        return this.setState({ submitState: false });\r\n      }\r\n    } else if (!this.state.submitState) {\r\n      let a = false;\r\n      if (this.state.password.length >= 8) {\r\n        a = this.state.confirmPassword === this.state.password;\r\n      }\r\n      let b = this.state.isEmailValid;\r\n      if (!a || !b || this.state.name === \"\") {\r\n        return this.setState({ submitState: true });\r\n      }\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n    this.validateSubmit();\r\n  }\r\n  onSubmitHandler(event) {\r\n    this.setState({ submitClass: \"button is-primary is-outlined is-loading\" });\r\n    const { email, name, password, age } = this.state;\r\n    console.log(localStorage.getItem(\"name\"));\r\n    const data = JSON.stringify({ Email: email, name, password, age });\r\n    const headers = new Headers();\r\n    headers.append(\"content-type\", \"application/json\");\r\n    const options = {\r\n      method: \"POST\",\r\n      headers,\r\n      body: data\r\n    };\r\n    const request = new Request(\"http://localhost:3001/users\", options);\r\n    fetch(request)\r\n      .then(async res => {\r\n        try {\r\n          const response = await res.json();\r\n          if (response.token) localStorage.setItem(\"token\", response.token);\r\n          console.log(response);\r\n          setTimeout(() => {\r\n            this.setState({\r\n              name: \"\",\r\n              email: \"\",\r\n              password: \"\",\r\n              age: null,\r\n              confirmPassword: \"\",\r\n              passwordClass: \"input\",\r\n              exclamation: null,\r\n              submitClass: \"button is-info\",\r\n              submitState: true,\r\n              emailFieldClass: \"input\",\r\n              emailFieldAfterRequest: \"\",\r\n              isLoading: false,\r\n              isEmailValid: false\r\n            });\r\n          }, 1000);\r\n        } catch (e) {\r\n          setTimeout(() => {\r\n            this.setState({\r\n              submitClass: \"button is-warning is-outlined\"\r\n            });\r\n          }, 1000);\r\n          console.log(e.message);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        this.setState({ submitClass: \"button is-danger is-outlined\" });\r\n        console.log(e.message);\r\n      });\r\n\r\n    // axios\r\n    //   .post(\r\n    //     \"http://localhost:3001/users\",\r\n    //     { Email: email },\r\n    //     {\r\n    //       withCredentials: true,\r\n    //       headers: {\r\n    //         // \"Access-Control-Allow-Origin\": \"*\",\r\n    //         \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\r\n    //       }\r\n    //     }\r\n    //   )\r\n    //   .then(res => {\r\n    //     console.log(res);\r\n    //   })\r\n    //   .catch(e => {\r\n    //     console.log(e.message);\r\n    //   });\r\n    event.preventDefault();\r\n  }\r\n  onChangeHandler(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n    this.setState({ isSubmitted: false });\r\n  }\r\n  onBlurHandler(event) {\r\n    // this.validateSubmit();\r\n    if (event.target.name === \"password\") {\r\n      if (event.target.value.length < 8) {\r\n        return this.setState({\r\n          passwordClass: \"input is-danger\",\r\n          exclamation: this.exclamation\r\n        });\r\n      }\r\n      return this.setState({ passwordClass: \"input\", exclamation: null });\r\n    }\r\n    if (event.target.name === \"email\") {\r\n      const isValidEmail = validator.default.isEmail(event.target.value);\r\n      if (isValidEmail) {\r\n        this.setState({ isLoading: true, emailFieldAfterRequest: null });\r\n        const headers = new Headers();\r\n        headers.append(\"content-type\", \"application/json\");\r\n        const options = {\r\n          method: \"GET\",\r\n          headers\r\n        };\r\n        const request = new Request(\r\n          `http://localhost:3001/users/find/${event.target.value}`,\r\n          options\r\n        );\r\n        fetch(request)\r\n          .then(res => {\r\n            setTimeout(() => {\r\n              this.setState({ isLoading: false });\r\n\r\n              if (res.status === 400) {\r\n                this.setState({\r\n                  emailFieldClass: \"input is-danger\",\r\n                  emailFieldAfterRequest: (\r\n                    <div>\r\n                      <span className=\"icon is-small is-right\">\r\n                        <i className=\"fas fa-exclamation-triangle\"></i>\r\n                      </span>\r\n                      <p className=\"help is-danger\">\r\n                        Email Already Taken or Email is Not Valid\r\n                      </p>\r\n                    </div>\r\n                  )\r\n                });\r\n              } else if (res.status === 200) {\r\n                this.setState({\r\n                  isEmailValid: true,\r\n                  emailFieldClass: \"input is-success\",\r\n                  emailFieldAfterRequest: (\r\n                    <span className=\"icon is-small is-right\">\r\n                      <i className=\"fas fa-check\"></i>\r\n                    </span>\r\n                  )\r\n                });\r\n              }\r\n              console.log(res.status);\r\n            }, 1000);\r\n          })\r\n          .catch(e => {\r\n            console.log(e.message);\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={\"container is-fluid\"}>\r\n        <div className={\"level\"} style={{ marginTop: 10 }}>\r\n          <p className={\"level-item has-text-centered\"}>\r\n            <img\r\n              src={require(\"./complainify.png\")}\r\n              // style={{ width: 80, height: 90 }}\r\n              className={\"image is-128x128\"}\r\n              alt=\"anonymous\"\r\n            ></img>\r\n          </p>\r\n        </div>\r\n        <h1\r\n          style={{\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\",\r\n            fontSize: 30\r\n            // color: \"#0f0f0f\"\r\n          }}\r\n        >\r\n          Anonimity\r\n        </h1>\r\n        <div className={\"box\"} style={{ marginTop: 10, background: \"#f0f0f0\" }}>\r\n          <div className=\"container is-fluid\">\r\n            <h1 style={{ marginBottom: 10, fontWeight: \"bold\" }}>Sign Up</h1>\r\n            <form onSubmit={this.onSubmitHandler}>\r\n              <div className={\"field\"}>\r\n                <input\r\n                  className={\"input\"}\r\n                  type=\"name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Name\"\r\n                  onChange={this.onChangeHandler}\r\n                  value={this.state.name}\r\n                  onBlur={this.onBlurHandler}\r\n                  required\r\n                ></input>\r\n              </div>\r\n              <div className={\"field\"}>\r\n                <div className={\"control has-icons-right\"}>\r\n                  <input\r\n                    className={this.state.emailFieldClass}\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                    onChange={this.onChangeHandler}\r\n                    value={this.state.email}\r\n                    onBlur={this.onBlurHandler}\r\n                    required\r\n                  ></input>\r\n                  {this.state.emailFieldAfterRequest}\r\n                </div>\r\n                {this.state.isLoading ? (\r\n                  <progress className=\"progress is-small is-info\" max=\"100\">\r\n                    30%\r\n                  </progress>\r\n                ) : null}\r\n              </div>\r\n              <div className={\"field\"}>\r\n                <div className={\"control has-icons-right\"}>\r\n                  <input\r\n                    className={this.state.passwordClass}\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    onChange={this.onChangeHandler}\r\n                    value={this.state.password}\r\n                    onBlur={this.onBlurHandler}\r\n                    required\r\n                  ></input>\r\n                  {this.state.exclamation}\r\n                </div>\r\n              </div>\r\n              <div className={\"field\"}>\r\n                <input\r\n                  className={\"input\"}\r\n                  type=\"number\"\r\n                  name=\"age\"\r\n                  placeholder=\"age\"\r\n                  onChange={this.onChangeHandler}\r\n                  value={this.state.age}\r\n                  required\r\n                ></input>\r\n              </div>\r\n              <div className={\"field\"}>\r\n                <input\r\n                  className={\"input\"}\r\n                  type=\"password\"\r\n                  name=\"confirmPassword\"\r\n                  placeholder=\"Confirm Password\"\r\n                  onChange={this.onChangeHandler}\r\n                  value={this.state.confirmPassword}\r\n                  required\r\n                ></input>\r\n              </div>\r\n              <button\r\n                disabled={this.state.submitState}\r\n                className={this.state.submitClass}\r\n                type=\"submit\"\r\n              >\r\n                Sign Up\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Registration from \"./auth/registration\";\n// import App from \"./App\";\n// import Something from \"./components/something\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst main = () => {\n  ReactDOM.render(<Registration />, document.getElementById(\"root\"));\n};\nsetInterval(main, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}